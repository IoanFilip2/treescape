% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/metrics.R
\name{multiDist}
\alias{multiDist}
\title{Metric function for \code{multiPhylo} input}
\usage{
multiDist(trees, lambda = 0, return_lambda_function = F, save_memory = F)
}
\arguments{
\item{trees}{an object of the class \code{multiPhylo} containing the trees to be compared}

\item{lambda}{a number in [0,1] which specifies the extent to which topology (default, with lambda=0)  or branch lengths (lambda=1) are emphasised. This argument is ignored if \code{return_lambda_function=TRUE}.}

\item{return_lambda_function}{If true, a function that can be invoked with different lambda values is returned.
This function returns the matrix of metric values for the given lambda.}

\item{save_memory}{A flag that saves a lot of memory but increases the execution time (not compatible with return_lambda_function=TRUE).}
}
\value{
The distance matrix or a function that produces the distance matrix given a value for lambda.
}
\description{
Comparison of a list of trees using the Kendall Colijn metric. Output is given as a pairwise distance matrix.
}
\examples{
## generate 10 random trees, each with 6 tips
trees <- rmtree(10,6)

## pairwise distance matrix when lambda=0
multiDist(trees)

## pairwise distance matrix as a function of lambda:
m <- multiDist(trees, return_lambda_function=TRUE)

## evaluate at lambda=0. Equivalent to multiDist(trees).
m0 <- m(0)

## A method to visualise these distances with MDS:
require(ade4)

## find an optimum projection of the points in 2 dimensions:
mMDS <- dudi.pco(as.dist(m0), scannf=FALSE,nf=2)

## put the coordinates of these points into a data frame
mdf <-mMDS$li

## basic ade4 plot
s.label(mdf)

## ggplot2 version
if(require(ggplot2) && require(RColorBrewer)){
mplot <- ggplot(mdf, aes(x=A1, y=A2))

mpalette <- brewer.pal(10,"Paired") # create colour palette

mplot + geom_point(colour=mpalette,size=5) +
  xlab("") + ylab("") + theme_bw(base_family = "")
}


## An example using data:
## These woodmice phylogenies were created using the bootstrapping example in package \\code{ape}
data(woodmiceTrees)
woodmiceDists <- multiDist(woodmiceTrees) # find topological distances
woodmiceMDS <- dudi.pco(as.dist(woodmiceDists), scannf=FALSE, nf=2)
woodmicedf <- woodmiceMDS$li

if(require(ggplot2)){
woodmiceplot <- ggplot(woodmicedf, aes(x=A1, y=A2)) # create plot
woodmiceplot + geom_density2d(colour="gray80") + # contour lines
 geom_point(size=6, shape=1, colour="gray50") + # grey edges
 geom_point(size=6, alpha=0.2, colour="navy") + # transparent blue points
 xlab("") + ylab("") + theme_bw(base_family="") # remove axis labels and grey background
}

\dontrun{
if(require(rgl)){
woodmiceMDS3D <- dudi.pco(as.dist(woodmiceDists), scannf=FALSE, nf=3)
plot3d(woodmiceMDS3D$li[,1], woodmiceMDS3D$li[,2], woodmiceMDS3D$li[,3], type="s", size=1.5,
   col="navy", alpha=0.5, xlab="", ylab="", zlab="")
}
}
}
\author{
Jacob Almagro-Garcia \email{nativecoder@gmail.com}

Michelle Kendall \email{michelle.louise.kendall@gmail.com}
}

