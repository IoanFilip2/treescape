v <- as.numeric(c(v,lambda*pen.length1))
}
return(v)
}
# initialise vector, length n choose 2 if lambda=0, otherwise n choose 2 + n
if (lambda==0) {  centre <- rep(0,(k*(k-1)/2)) }
else {  centre <- rep(0,(k*(k+1)/2)) }
vecs <- list()
for (i in 1:n) {
vecs[[i]] <- tree.vec.match(trees[[i]],lambda,labelmatch[[i]],k,n)
centre <- centre + vecs[[i]]*likes[[i]]
}
centre <- centre/n
# also want to know which vecs[[i]] is closest to median
d <- list()
for (i in 1:n){
v <- vecs[[i]]-centre
d[[i]] <- sqrt(sum(v^2))
}
class(d) <- "numeric"
md <- min(d)
median <- which(d==md)
result <- list()
result$centre <- centre
result$median <- median
result$mindist <- md
return(result)
}
med.tree <- cmpfun(med.tree)
#require(ggplot2)
#require(ade4)
#mydist <- multi.dist(rmtree(6,6))
#plotMDS <- function(distmatrix) {
#  distMDS <- dudi.pco(as.dist(distmatrix), scannf=FALSE, nf=2)
#  distdf <- as.data.frame(cbind(distMDS$li[,1], distMDS$li[,2]))
#  distplot <- ggplot(distdf, aes(distMDS$li[,1], distMDS$li[,2]))
#  return(distplot)
#}
#plotMDS(mydist) + geom_point() + xlab("") + ylab("") + theme(legend.title=element_blank())
#rm(distplot)
# library(exploratree)
library(ape)
library(Rcpp)
library(inline)
########################################################################################################################
#' Computes the Kendall-Colijn tree metric vector. Optimized CPP version (required RCPP and inline).
#' @param tree A Phylo tree (not required to be binary).
#' @param lambda Parameter (in [0,1]) that weighs branch/topological distances in the metric. With 0 only taking into
#' account topological distances and with 1 only using branch lengths.
#' @param return_lambda_function If true, a function that can be invoked with different lambda values is returned.
#'  This function returns the vector of metric values for the given lambda.
#' @return The vector with the metric values or a function that produces the vector given a value of lambda.
########################################################################################################################
computeKCMetricVectorCPP <- function(tree, lambda=0, return_lambda_function=F) {
if(lambda<0 || lambda>1) stop("Pick lambda in [0,1]")
num_leaves <- length(tree$tip.label)
num_edges <- nrow(tree$edge)
# We work with ordered labels, using this vector to transform indices.
tip_order <- match(1:num_leaves, order(tree$tip.label))
# Ordering the edges by first column places the root at the bottom.
# Descendants will be placed always before parents.
edge_order <- order(tree$edge[,1], decreasing=T)
edges <- tree$edge[edge_order,]
edge_lengths <- tree$edge.length[edge_order]
# We annotated the nodes of the tree in this list. In two passes we are going to
# compute the partition each node induces in the tips (bottom-up pass) and the distance
# (in branch length and number of branches) from the root to each node (top-down pass).
annotated_nodes <- list()
# Bottom up (compute partitions, we store the branch lengths to compute distances
# to the root on the way down).
for(i in 1:num_edges) {
parent <- edges[i,1]
child <- edges[i,2]
# Initialization (leaves).
if(child <= num_leaves) {
# We translate the index for the sorted labels.
child <- tip_order[child]
# Leaves have as children themselves.
annotated_nodes[[child]] <- list(root_distance=NULL, edges_to_root=1, partitions=list(child))
}
# Aggregate the children partitions (only if we are not visiting a leaf).
aggregated_partitions <- annotated_nodes[[child]]$partitions[[1]]
if((child > num_leaves)) {
for(p in 2:length(annotated_nodes[[child]]$partitions))
aggregated_partitions <- c(aggregated_partitions, annotated_nodes[[child]]$partitions[[p]])
}
# Update the branch length on the child.
annotated_nodes[[child]]$root_distance <- edge_lengths[i]
# We have not visited this internal node before.
if(parent > length(annotated_nodes) || is.null(annotated_nodes[[parent]])) {
# Assume the first time we get the left child partition.
annotated_nodes[[parent]] <- list(root_distance=NULL, edges_to_root=1, partitions=list(aggregated_partitions))
}
# This is not the first time we have visited the node.
else {
# We store the next partition of leaves.
annotated_nodes[[parent]]$partitions[[length(annotated_nodes[[parent]]$partitions)+1]] <- aggregated_partitions
}
}
# Update the distance to the root at the root (i.e. 0)
# And the number of edges to the root (i.e. 0).
annotated_nodes[[num_leaves+1]]$root_distance <- 0
annotated_nodes[[num_leaves+1]]$edges_to_root <- 0
# Top down, compute distances to the root for each node.
for(i in num_edges:1) {
parent <- edges[i,1]
child <- edges[i,2]
# If the child is a leaf we translate the index for the sorted labels.
if(child <= num_leaves)
child <- tip_order[child]
annotated_nodes[[child]]$root_distance <- annotated_nodes[[child]]$root_distance + annotated_nodes[[parent]]$root_distance
annotated_nodes[[child]]$edges_to_root <- annotated_nodes[[child]]$edges_to_root + annotated_nodes[[parent]]$edges_to_root
}
# Distance vectors
vector_length <- (num_leaves*(num_leaves-1)/2) + num_leaves
length_root_distances <- double(vector_length)
topological_root_distances <- integer(vector_length)
# Fill-in the leaves (notice the involved index translation for leaves).
topological_root_distances[(vector_length-num_leaves+1):vector_length] <- 1
length_root_distances[(vector_length-num_leaves+1):vector_length] <- edge_lengths[match(1:num_leaves, edges[,2])][order(tree$tip.label)]
# Instead of computing the lexicographic order for the combination pairs assume we
# are filling in a symmetric distance matrix (using only the triangular upper part).
# We just need to "roll" the matrix indices into the vector indices.
# Examples for (k=5)
# The combination c(1,4) would be located at position 3 on the vector.
# The combination c(2,1) would be located at position 1 on the vector because d(2,1) = d(1,2).
# The combination c(2,3) would be located at position 5 on the vector.
index_offsets <- c(0, cumsum((num_leaves-1):1))
# This is the slow part, we compute both vectors as gain would be marginal.
sapply(annotated_nodes, function(node) {
# We skip leaves and the root (if the MRCA for M groups of leaves is at the root
# all combinations of leaves -among different groups- have 0 as distance to the root).
# For large trees this can spare us of computing a lot of combinations.
# Example: In a perfectly balanced binary tree (N/2 leaves at each side of the root),
# at the root we'd save (N/2) * (N/2) combinations to update. Worst case scenario is completely
# unbalanced tree (N-1,1), we'd save in that case only N-1 combinations.
# Make sure we are not visiting a leaf or the root.
if(length(node$partitions) > 1 && node$root_distance > 0) {
# Update all combinations for pairs of leaves from different groups.
num_groups <- length(node$partitions)
for(group_a in 1:(num_groups-1)) {
for(group_b in (group_a+1):num_groups) {
CPP_update_combinations(length_root_distances, topological_root_distances, node$partitions[[group_a]],
node$partitions[[group_b]], index_offsets, node$root_distance, node$edges_to_root)
}
}
}
})
if(!return_lambda_function)
return(lambda * length_root_distances + (1-lambda) * topological_root_distances)
else {
return(function(l) {
if(l<0 || l>1) stop("Pick lambda in [0,1]")
return(l * length_root_distances + (1-l) * topological_root_distances) })
}
}
########################################################################################################################
#' CPP implementation of the function that updates the vector of distances for a set of leaf combinations (the ones
#' induced by a specific node of the tree). We modify the vectors within the function (to avoid copying them).
#' @param length_root_distances The vector of length distances to the root (for each combination of leaves).
#' @param topological_root_distances The vector of edge distances to the root (for each combination of leaves).
#' @param left_partition A vector with the leaves on the left subtree of the current node.
#' @param right_partition A vector with the leaves on the right subtree of the current node.
#' @param index_offsets Auxiliary vector used to compute the vector index for a given combination.
#' @param distance_to_root The branch length distance (branch length to the root).
#' @param edges_to_root The edge distance (number of edges to the root).
########################################################################################################################
CPP_update_combinations <- cppFunction("void updateDistancesWithCombinations(NumericVector& length_root_distances,
NumericVector& topological_root_distances,
IntegerVector& left_partition,
IntegerVector& right_partition,
IntegerVector& index_offsets,
double distance_to_root,
int edges_to_root)
{
// Iterate through all combinations.
for(int i=0; i < left_partition.size(); ++i) {
for(int j=0; j < right_partition.size(); ++j) {
int first_leaf = left_partition[i];
int second_leaf = right_partition[j];
// Because of the symmetric distances.
if(left_partition[i] > right_partition[j]) {
first_leaf = right_partition[j];
second_leaf = left_partition[i];
}
// Roll the index (notice we take into account C++ indices here, starting at 0).
int combination_index = index_offsets[first_leaf-1] + (second_leaf - first_leaf) - 1;
// Update the vectors.
length_root_distances[combination_index] = distance_to_root;
topological_root_distances[combination_index] = edges_to_root;
}
}
}")
########################################################################################################################
#' Computes the KC distance for the given trees.
#' @param tree_a A Phylo tree (same labels as tree_b).
#' @param tree_b A Phylo tree (same labels as tree_a).
#' @param lambda Parameter (in [0,1]) that weighs branch/topological distances in the metric. With 0 only taking into
#' account topological distances and with 1 only using branch lengths.
#' @param return_lambda_function If true, a function that can be invoked with different lambda values is returned.
#'  This function returns the vector of metric values for the given lambda.
#' @return The vector with the metric values or a function that produces the vector given a value of lambda.
########################################################################################################################
computeKCTreeDistance <- function(tree_a, tree_b, lambda=0, return_lambda_function=F) {
metric_a <- computeKCMetricVectorCPP(tree_a, lambda, return_lambda_function)
metric_b <- computeKCMetricVectorCPP(tree_b, lambda, return_lambda_function)
if(!return_lambda_function) {
return(sqrt(sum((metric_a - metric_b)^2)))
}
else {
return(function(l) {
return(sqrt(sum((metric_a(l) - metric_b(l))^2)))
})
}
}
########################################################################################################################
#' Computes pairwise KC distance matrix for the given set of trees.
#' @param trees an object of the class multiPhylo, containing the trees to be compared.
#' @param lambda Parameter (in [0,1]) that weighs branch/topological distances in the metric. With 0 only taking into
#' account topological distances and with 1 only using branch lengths.
#' @param return_lambda_function If true, a function that can be invoked with different lambda values is returned.
#'  This function returns the vector of metric values for the given lambda.
#' @parma save_memory A flag that saves a lot of memory but increases the execution time (not compatible with return_lambda_function=T).
#' @return The distance matrix or a function that produces the distance matrix given a value for lambda.
########################################################################################################################
computeKCTreeDistances <- function(trees, lambda=0, return_lambda_function=F, save_memory=F) {
num_trees <- length(trees)
# Working with numbers (no functions).
if(!return_lambda_function) {
distances <- matrix(0.0, num_trees, num_trees)
# Here we speed up the computation by storing all vectors (a lot of memory for big trees).
if(!save_memory) {
# Compute the metric vector for all trees.
tree_metrics <- t(sapply(trees, function(tree) {computeKCMetricVectorCPP(tree, lambda, F)}))
sapply(1:(num_trees-1), function(i) {
sapply((i+1):num_trees, function(j) {
distances[i,j] <<- distances[j,i] <<- sqrt(sum((tree_metrics[i,] - tree_metrics[j,])^2))
})
})
}
# To save memory we recompute the vectors for each tree comparison (way slower but we don't eat a ton of memory).
else {
sapply(1:(num_trees-1), function(i) {
sapply((i+1):num_trees, function(j) {
distances[i,j] <<- distances[j,i] <<- computeKCTreeDistance(trees[[i]], trees[[j]], lambda, F)
})
})
}
return(as.dist(distances))
}
# Working with functions.
else {
if(save_memory)
warning("save_memory=T is incompatible with return_lambda_function=T, setting save_memory=F")
# Compute the list of metric functions for all trees.
tree_metric_functions <- sapply(trees, function(tree) {computeKCMetricVectorCPP(tree, lambda, T)})
# Inner function that we'll return, computes the distance matrix given lambda.
compute_distance_matrix_function <- function(l) {
distances <- matrix(0.0, num_trees, num_trees)
sapply(1:(num_trees-1), function(i) {
sapply((i+1):num_trees, function(j) {
distances[i,j] <<- distances[j,i] <<- sqrt(sum((tree_metric_functions[[i]](l) - tree_metric_functions[[j]](l))^2))
})
})
return(as.dist(distances))
}
return(compute_distance_matrix_function)
}
}
########################################################################################################################
########################################################################################################################
## Unit tests.
########################################################################################################################
########################################################################################################################
########################################################################################################################
#' Unit tests for metric vectors. C++ code has a different double resolution and sometimes can produce differences in the
#' order of 10e-14.
########################################################################################################################
testMetricVectorMethods <- function(num_trees=100, num_leaves=100, seed=NULL, lambda=NULL) {
if(!is.null(seed))
set.seed(seed)
else {
seed <- sample(1:10000,1)
set.seed(seed)
}
print(paste("Testing metric vector methods, seed:", seed), quote=F)
for(i in 1:num_trees) {
tree <- di2multi(rtree(num_leaves), runif(1, 0, 0.8))
if(is.null(lambda))
l <- runif(1)
else
l <- lambda
true_vector <- tree.vec(tree, l)
optimized_cpp_vector <- computeKCMetricVectorCPP(tree,l)
if(any(abs(true_vector - optimized_cpp_vector) > 10e-10))
stop("Incoherence in methods results")
}
print("Metric vector test passed with flying colors...", quote=F)
}
########################################################################################################################
#' Unit tests for distance methods. C++ code has a different double resolution and sometimes can produce differences in
#' the order of 10e-14.
########################################################################################################################
testDistanceMethods <- function(num_trees=100, num_leaves=100, seed=NULL, lambda=NULL) {
if(!is.null(seed))
set.seed(seed)
else {
seed <- sample(1:10000,1)
set.seed(seed)
}
print(paste("Testing distance methods, seed:", seed), quote=F)
for(i in 1:num_trees) {
tree_a <- di2multi(rtree(num_leaves), runif(1, 0, 0.8))
tree_b <- di2multi(rtree(num_leaves), runif(1, 0, 0.8))
if(is.null(lambda))
l <- runif(1)
else
l <- lambda
true_dist <- tree.dist(tree_a, tree_b, l)
optimized_cpp_dist <- computeKCTreeDistance(tree_a, tree_b, l)
if(abs(true_dist - optimized_cpp_dist) > 10e-10)
stop("Incoherence in methods results")
}
print("Distance test passed with flying colors...", quote=F)
}
########################################################################################################################
#' Unit tests for mutiple distance methods. C++ code has a different double resolution and sometimes can produce differences in
#' the order of 10e-14.
########################################################################################################################
testMultiDistanceMethods <- function(num_trees=100, num_leaves=100, seed=NULL, lambda=NULL) {
if(!is.null(seed))
set.seed(seed)
else {
seed <- sample(1:10000,1)
set.seed(seed)
}
print(paste("Testing multiple distance methods, seed:", seed), quote=F)
trees <- rmtree(num_trees, num_leaves)
if(is.null(lambda))
l <- runif(1)
else
l <- lambda
true_dist <- multi.dist(trees, l)
optimized_cpp_dist <- computeKCTreeDistances(trees, l, save_memory = F)
if(any(abs(true_dist - optimized_cpp_dist) > 10e-10))
stop("Incoherence in methods results")
print("Multipe Distance test passed with flying colors...", quote=F)
}
########################################################################################################################
# Run the tests.
########################################################################################################################
# Testing the metric vector methods.
testMetricVectorMethods(num_trees=10, num_leaves=100)
# Testing the metric distance method.
testDistanceMethods(num_trees=100, num_leaves=100)
# Testing the metric multi-distance method.
testMultiDistanceMethods(num_trees=100, num_leaves=50)
########################################################################################################################
# Benchmarking.
########################################################################################################################
# Computing metric vectors for big trees.
tree <- rtree(2500)
print("Time for original metric vector method: 2500 leaves, lambda 0.5", quote=F)
system.time(tree.vec(tree,0.5))
print("Time for C++ optimized metric vector method: 2500 leaves, lambda 0.5", quote=F)
system.time(computeKCMetricVectorCPP(tree,0.5))
# Computing distances for big trees.
tree_a <- di2multi(rtree(2500),runif(1, 0, 0.8))
tree_b <- di2multi(rtree(2500),runif(1, 0, 0.8))
print("Time for original distance method: 2500 leaves, lambda 0.5", quote=F)
system.time(tree.dist(tree_a, tree_b, 0.5))
print("Time for C++ optimized distance method: 2500 leaves, lambda 0.5", quote=F)
system.time(computeKCTreeDistance(tree_a, tree_b, 0.5))
# Computing distances for multipe trees.
trees <- rmtree(100, 500)
print("Time for original multi-distance method: 100 trees, 500 leaves, lambda 0.5", quote=F)
system.time(multi.dist(trees, lambda=0.5))
print("Time for the C++ optimized multi-distance method: 100 trees, 500 leaves, lambda 0.5", quote=F)
system.time(computeKCTreeDistances(trees, lambda = 0.5, return_lambda_function = F))
require(phangorn)
system.time(computeKCTreeDistance(tree_a, tree_b, 0.5))
system.time(tree.vec(tree,0.5))
tree.vec(tree,0.5)
require(ape)
tree.vec(tree,0.5)
tr1 <- rtree(6)
computeKCMetricVectorCPP(tr1)
tree.vec(tr1)
pen.edge.tree <- function(tree,k) {tree$edge[match(1:k, tree$edge[,2]),] }
pen.edge.tree <- cmpfun(pen.edge.tree)
pen.edge.treematch  <- function(tree,labelmatch) {tree$edge[match(labelmatch, tree$edge[,2]),] }
pen.edge.treematch <- cmpfun(pen.edge.treematch)
tree.vec <- function(tr1,lambda=0,type="number") { # allow output type to be number or function
if (type=="number"){
if (lambda<0) {stop("Pick lambda in [0,1]")}
if (lambda>1) {stop("Pick lambda in [0,1]")}
k <- length(tr1$tip.label)
# checks and warnings
if (lambda!=0) { # if lambda=0 then we don't need edge lengths to be defined, but if lambda!=0 then we do
if (is.null(tr1$edge.length)) {
stop("edge lengths not defined")
}
}
M1 <- linear.mrca(tr1,k); # kxk MRCA matrix for tr1
pairs <- combn2(1:k)
tiporder <- order(tr1$tip.label)
if (lambda!=1){ # make a copy with edge lengths = 1 because we need to know topological distances
TR1 <- tr1;       TR1$edge.length <- rep(1,length(tr1$edge.length))
D1 <- dist.nodes(TR1);
}
if (lambda!=0) { # if lambda!=0 we need to know branch length distances
d1 <- dist.nodes(tr1);
}
# vt is the purely topological vector (don't waste time computing if lambda=1)
if (lambda==1) { vt <- rep(0,k*(k-1)/2)}
else {
vt <- apply(pairs, 1, function(x) D1[k+1,M1[[tiporder[[x[1]]],tiporder[[x[2]]]]]])
}
# append k entries of "1" for pendant edges
vt <- as.numeric(c(vt,rep(1,k)))
# vl is the purely length-based vector (don't waste time computing if lambda=0)
if (lambda==0) { vl <- rep(0,k*(k+1)/2) }
else {
vl <- apply(pairs, 1, function(x) d1[k+1,M1[[tiporder[[x[1]]],tiporder[[x[2]]]]]])
ep1 <- pen.edge.treematch(tr1,tiporder);
pen.length1 <- apply(ep1, 1, function(x) d1[x[1],x[2]])
vl <- as.numeric(c(vl,pen.length1))
}
v <- (1-lambda)*vt + lambda*vl
return(v)
}
if (type=="function") {
lambda <- integer()
k <- length(tr1$tip.label)
# checks and warnings
if (is.null(tr1$edge.length)) {
stop("edge lengths not defined")
}
M1 <- linear.mrca(tr1,k); # kxk MRCA matrix for tree 1
pairs <- combn2(1:k)
tiporder <- order(tr1$tip.label)
# make a copy of the tree called TR1 with edge lengths = 1
TR1 <- tr1
TR1$edge.length <- rep(1,length(tr1$edge.length));
D1 <- dist.nodes(TR1);
# find distances based on branch lengths:
d1 <- dist.nodes(tr1);
# vt is the purely topological vector, vl is the purely length-based vector
vt <- apply(pairs, 1, function(x) D1[k+1,M1[[tiporder[[x[1]]],tiporder[[x[2]]]]]])
vl <- apply(pairs, 1, function(x) d1[k+1,M1[[tiporder[[x[1]]],tiporder[[x[2]]]]]])
# append vector of pendant branch lengths
ep1 <- pen.edge.treematch(tr1,tiporder);
pen.length1 <- apply(ep1, 1, function(x) d1[x[1],x[2]])
vlambda <- function(lambda) {
if (lambda<0) {stop("Pick lambda in [0,1]")}
if (lambda>1) {stop("Pick lambda in [0,1]")}
(c(((1-lambda)*vt + lambda*vl),(lambda*pen.length1))) }
return(vlambda)
}
}
tree.vec <- cmpfun(tree.vec)
tree.vec(tree,0.5)
tree
tree.vec(tr1)
tree <- rtree(2500)
tree.vec(tree,0.5)
tree.vec(tr1)
install_github("ThibautJombart/treescape",args='-l "C:/icnas3.cc.ic.ac.uk/mlkendal/R/win-library/3.1"')
library(devtools)
install_github("ThibautJombart/treescape",args='-l "C:/icnas3.cc.ic.ac.uk/mlkendal/R/win-library/3.1"')
library(treescape, lib.loc="C:/icnas3.cc.ic.ac.uk/mlkendal/R/win-library/3.1")
tree.vec(tr1)
library(shiny)
?shiny
install.packages(c("adegenet", "ape", "dendextend", "devtools", "e1071", "goftest", "httpuv", "httr", "igraph", "phangorn", "phylobase", "plyr", "polyclip", "pracma", "R6", "RCurl", "rgl", "scales", "shiny", "stringr", "XML"))
library(treescape, lib.loc="C:/icnas3.cc.ic.ac.uk/mlkendal/R/win-library/3.1")
treescapeServer()
suppressPackageStartupMessages(library(installr))
RStudio_CRAN_data_folder <- download_RStudio_CRAN_data(START = '2015-09-10',
END = '2015-10-19',
#log_folder = "C:/Users/Michelle/Dropbox/CRANlogs")
log_folder = "C:/Users/mlkendal/Dropbox/CRANlogs")
my_RStudio_CRAN_data <- read_RStudio_CRAN_data(RStudio_CRAN_data_folder)
my_RStudio_CRAN_data <- format_RStudio_CRAN_data(my_RStudio_CRAN_data)
barplot_package_users_per_day("treescape", my_RStudio_CRAN_data)
lineplot_package_downloads(pkg_names = c("treescape","phyloTop"),
dataset = my_RStudio_CRAN_data)
lineplot_package_downloads(pkg_names = c("treescape","kdetrees"),
dataset = my_RStudio_CRAN_data)
suppressPackageStartupMessages(library(installr))
RStudio_CRAN_data_folder <- download_RStudio_CRAN_data(START = '2015-09-10',
END = '2016-01-11',
#log_folder = "C:/Users/Michelle/Dropbox/CRANlogs")
log_folder = "C:/Users/mlkendal/Dropbox/CRANlogs")
my_RStudio_CRAN_data <- read_RStudio_CRAN_data(RStudio_CRAN_data_folder)
my_RStudio_CRAN_data <- format_RStudio_CRAN_data(my_RStudio_CRAN_data)
barplot_package_users_per_day("outbreaker", my_RStudio_CRAN_data)
barplot_package_users_per_day("treescape", my_RStudio_CRAN_data)
lineplot_package_downloads(pkg_names = c("treescape","kdetrees"),
dataset = my_RStudio_CRAN_data)
lineplot_package_downloads(pkg_names = c("treescape","rtwy"),
dataset = my_RStudio_CRAN_data)
lineplot_package_downloads(pkg_names = c("treescape","outbreaker"),
dataset = my_RStudio_CRAN_data)
setwd("C:/Users/mlkendal/Dropbox/treescape")
library(devtools)
install_github("juba/scatterD3",args='-l "C:/icnas3.cc.ic.ac.uk/mlkendal/R/win-library/3.2"')
library(scatterD3, lib.loc="C:/icnas3.cc.ic.ac.uk/mlkendal/R/win-library/3.2")
install.packages("digest")
install_github("juba/scatterD3",args='-l "C:/icnas3.cc.ic.ac.uk/mlkendal/R/win-library/3.2"')
library(devtools)
install_github("juba/scatterD3",args='-l "C:/icnas3.cc.ic.ac.uk/mlkendal/R/win-library/3.2"')
