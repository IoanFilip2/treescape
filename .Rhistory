else {
vt <- apply(pairs, 1, function(x) D1[k+1,M1[[tiporder[[x[1]]],tiporder[[x[2]]]]]])
}
if (lambda==0) { vl <- rep(0,k*(k-1)/2)}
else {
vl <- apply(pairs, 1, function(x) d1[k+1,M1[[tiporder[[x[1]]],tiporder[[x[2]]]]]])
}
v <- (1-lambda)*vt + lambda*vl
if (lambda!=0) {
# append vector of pendant branch lengths
ep1 <- pen.edge.treematch(tr1,tiporder);
pen.length1 <- apply(ep1, 1, function(x) d1[x[1],x[2]])
v <- as.numeric(c(v,lambda*pen.length1))
}
return(v)
}
if (type=="function") {
lambda <- integer()
k <- length(tr1$tip.label)
# checks and warnings
if (is.null(tr1$edge.length)) {
stop("edge lengths not defined")
}
M1 <- linear.mrca(tr1,k); # kxk MRCA matrix for tree 1
# make a copy of the tree called TR1 with edge lengths = 1
TR1 <- tr1
TR1$edge.length <- rep(1,2*k-2);
D1 <- dist.nodes(TR1);
# find distances based on branch lengths:
d1 <- dist.nodes(tr1);
pairs <- combn2(1:k)
tiporder <- order(tr1$tip.label)
# vt is the purely topological vector, vl is the purely length-based vector
vt <- apply(pairs, 1, function(x) D1[k+1,M1[[tiporder[[x[1]]],tiporder[[x[2]]]]]])
vl <- apply(pairs, 1, function(x) d1[k+1,M1[[tiporder[[x[1]]],tiporder[[x[2]]]]]])
# append vector of pendant branch lengths
ep1 <- pen.edge.treematch(tr1,tiporder);
pen.length1 <- apply(ep1, 1, function(x) d1[x[1],x[2]])
vlambda <- function(lambda) {
if (lambda<0) {stop("Pick lambda in [0,1]")}
if (lambda>1) {stop("Pick lambda in [0,1]")}
(c(((1-lambda)*vt + lambda*vl),(lambda*pen.length1))) }
return(vlambda)
}
}
tree.vec <- cmpfun(tree.vec)
tree.dist <- function(tr1,tr2,lambda=0,type="number") { # allow output type to be number or function of lambda
if (type=="number"){
if (lambda<0) {stop("Pick lambda in [0,1]")}
if (lambda>1) {stop("Pick lambda in [0,1]")}
k <- length(tr1$tip.label)
# checks and warnings
if (k != length(tr2$tip.label)) {
stop("trees have different numbers of tips")
}
if (setequal(tr1$tip.label,tr2$tip.label) == FALSE) {
stop("trees have different tip label sets")
}
if (lambda!=0) { # if lambda=0 then we don't need edge lengths to be defined, but if lambda!=0 then we do
if (is.null(tr1$edge.length)) {
stop("edge lengths not defined in first tree")
}
if (is.null(tr2$edge.length)) {
stop("edge lengths not defined in second tree")
}
}
M1 <- linear.mrca(tr1,k); # kxk MRCA matrix for tree 1
M2 <- linear.mrca(tr2,k);
labelmatch <- match(tr1$tip.label, tr2$tip.label);
if (lambda!=1){ # make a copy of the trees called TR1 and TR2, with edge lengths = 1
TR1 <- tr1; TR2 <- tr2
TR1$edge.length <- rep(1,2*k-2);
TR2$edge.length <- rep(1,2*k-2);
D1 <- dist.nodes(TR1); # if lambda!=1 we need to know edge count distances
D2 <- dist.nodes(TR2);
}
if (lambda!=0) { # if lambda!=0 we need to know branch length distances.
d1 <- dist.nodes(tr1);
d2 <- dist.nodes(tr2);
}
pairs <- combn2(1:k)
# vt is the purely topological vector (don't waste time computing if lambda=1)
# vl is the purely length-based vector (don't waste time computing if lambda=0)
if (lambda==1) { vt <- rep(0,k*(k-1)/2)}
else {
vt <- apply(pairs, 1, function(x) D1[k+1,M1[[x[1],x[2]]]] - D2[k+1,M2[[labelmatch[x[1]],labelmatch[x[2]]]]])
}
if (lambda==0) { vl <- rep(0,k*(k-1)/2)}
else {
vl <- apply(pairs, 1, function(x) d1[k+1,M1[[x[1],x[2]]]] - d2[k+1,M2[[labelmatch[x[1]],labelmatch[x[2]]]]])
}
v <- (1-lambda)*vt + lambda*vl
if (lambda!=0) {
# append vector of difference in pendant branch lengths
ep1 <- pen.edge.tree(tr1,k);
ep2 <- pen.edge.treematch(tr2,labelmatch);
pen.length1 <- apply(ep1, 1, function(x) d1[x[1],x[2]])
pen.length2 <- apply(ep2, 1, function(x) d2[x[1],x[2]])
pen.length.diff <- sapply(1:k, function(x) pen.length1[[x]] - pen.length2[[x]])
v <- as.numeric(c(v,lambda*pen.length.diff))
}
return(sqrt(sum(v^2)))
}
if (type=="function") {
lambda <- integer()
k <- length(tr1$tip.label)
# checks and warnings
if (k != length(tr2$tip.label)) {
stop("trees have different numbers of tips")
}
if (setequal(tr1$tip.label,tr2$tip.label) == FALSE) {
stop("trees have different tip label sets")
}
if (is.null(tr1$edge.length)) {
stop("edge lengths not defined in first tree")
}
if (is.null(tr2$edge.length)) {
stop("edge lengths not defined in second tree")
}
M1 <- linear.mrca(tr1,k); # kxk MRCA matrix for tree 1
M2 <- linear.mrca(tr2,k);
labelmatch <- match(tr1$tip.label, tr2$tip.label);
# make a copy of the trees called TR1 and TR2, with edge lengths = 1
TR1 <- tr1; TR2 <- tr2
TR1$edge.length <- rep(1,2*k-2);
TR2$edge.length <- rep(1,2*k-2);
D1 <- dist.nodes(TR1);
D2 <- dist.nodes(TR2);
# get full distance matrices with lengths
d1 <- dist.nodes(tr1);
d2 <- dist.nodes(tr2);
pairs <- combn2(1:k)
# vt is the purely topological vector, vl is the purely length-based vector
vt <- apply(pairs, 1, function(x) D1[k+1,M1[[x[1],x[2]]]] - D2[k+1,M2[[labelmatch[x[1]],labelmatch[x[2]]]]])
vl <- apply(pairs, 1, function(x) d1[k+1,M1[[x[1],x[2]]]] - d2[k+1,M2[[labelmatch[x[1]],labelmatch[x[2]]]]])
# append vector of difference in pendant branch lengths
ep1 <- pen.edge.tree(tr1,k);
ep2 <- pen.edge.treematch(tr2,labelmatch);
pen.length1 <- apply(ep1, 1, function(x) d1[x[1],x[2]])
pen.length2 <- apply(ep2, 1, function(x) d2[x[1],x[2]])
pen.length.diff <- sapply(1:k, function(x) pen.length1[[x]] - pen.length2[[x]])
vlambda <- function(lambda) {
if (lambda<0) {stop("Pick lambda in [0,1]")}
if (lambda>1) {stop("Pick lambda in [0,1]")}
sqrt(sum((c(((1-lambda)*vt + lambda*vl),(lambda*pen.length.diff)))^2)) }
return(vlambda)
}
}
tree.dist <- cmpfun(tree.dist)
multi.dist <- function(trees,lambda=0,type="number") { # allow output type to be number or function
#checks and warnings
if (class(trees) != "multiPhylo"){
stop("input must be of class multiPhylo")
}
l <- length(trees)
k <- length(trees[[1]]$tip.label)
for (i in 1:l) {
if (k != length(trees[[i]]$tip.label)) {
stop("trees must all have the same number of tips")
}
if (setequal(trees[[i]]$tip.label,trees[[1]]$tip.label) == FALSE) {
stop("trees have different tip label sets")
}
}
if (type=="number"){
# checks and warnings
if (lambda<0) {stop("Pick lambda in [0,1]")}
if (lambda>1) {stop("Pick lambda in [0,1]")}
if (lambda!=0) { # if lambda=0 then we don't need edge lengths to be defined, but if lambda!=0 then we do
if (is.null(trees[[i]]$edge.length)) {
stop("edge lengths not defined")
}}
M <- lapply(1:l, function(x) linear.mrca(trees[[x]],k));
labelmatch <- lapply(1:l, function (y)
match(trees[[1]]$tip.label,trees[[y]]$tip.label));
pairs <- combn2(1:k)
x <- k*(k-1)/2
# topvecs is the purely topological matrix of vectors (don't waste time computing if lambda=1)
# lvecs is the purely length-based matrix of vectors (don't waste time computing if lambda=0)
if (lambda!=1) {
# make a copy of the trees with edge lengths = 1
TREES <- trees
for (i in 1:l) {
TREES[[i]]$edge.length <- rep(1,(2*k-2));
}
D <- sapply(1:l, function(x) dist.nodes(TREES[[x]])[k+1,]); # vector of vectors
topvecs <- sapply(1:l, function(y) apply(pairs, 1, function(x) D[M[[y]][[labelmatch[[y]][x[1]],labelmatch[[y]][x[2]]]],y]));
tv <- (1-lambda)*topvecs
}
if (lambda!=0) {
# we also need to know branch length distance matrix
d <- lapply(1:l, function(x) dist.nodes(trees[[x]]));
lvecs <- sapply(1:l, function(y) apply(pairs, 1, function(x) d[[y]][k+1,M[[y]][labelmatch[[y]][x[1]],labelmatch[[y]][x[2]]]]));
tl <- lambda*lvecs
# append vector of difference in pendant branch lengths
E <- lapply(1:l, function(x) pen.edge.treematch(trees[[x]],labelmatch[[x]]))
Pen <- sapply(1:l, function(x) apply(E[[x]], 1, function(y) d[[x]][y[1],y[2]]) )
P <- lambda*Pen
}
if (lambda==0) {
# matrix where each entry is a vector of squared differences
sqdistmat <- sapply(1:l, function(a) sapply(1:l, function(b)
if (a<b) sapply(1:x, function(n) (tv[[n,a]]-tv[[n,b]])^2)))
}
else if (lambda==1) {
# matrix where each entry is a vector of squared differences plus pendant lengths
sqdistmat <- sapply(1:l, function(a) sapply(1:l, function(b)
if (a<b) c(sapply(1:x, function(n) (tl[[n,a]]-tl[[n,b]])^2),
sapply(1:k, function(d) (P[,a][[d]]-P[,b][[d]])^2))))
}
else {
# matrix where each entry is a vector of squared differences plus pendant lengths
sqdistmat <- sapply(1:l, function(a) sapply(1:l, function(b)
if (a<b) c(sapply(1:x, function(n) (tv[[n,a]]+tl[[n,a]]-tv[[n,b]]-tl[[n,b]])^2),
sapply(1:k, function(d) (P[,a][[d]]-P[,b][[d]])^2))))
}
# final matrix: each entry is square root of sum of sqdistmat entry
distmat <- sapply(1:l, function(a) sapply(1:l, function(b)
sqrt(sum(sqdistmat[[b,a]]))))
return(distmat)
}
else if (type=="function"){
lambda <- integer()
# check: we need edge lengths defined
if (is.null(trees[[i]]$edge.length)) {
stop("edge lengths not defined")
}
M <- lapply(1:l, function(x) linear.mrca(trees[[x]],k));
labelmatch <- lapply(1:l, function (y)
match(trees[[1]]$tip.label,trees[[y]]$tip.label));
pairs <- combn2(1:k)
x <- k*(k-1)/2
# make a copy of the trees with edge lengths = 1
TREES <- trees
for (i in 1:l) {
TREES[[i]]$edge.length <- rep(1,(2*k-2));
}
D <- sapply(1:l, function(x) dist.nodes(TREES[[x]])[k+1,]); # vector of vectors
tv <- sapply(1:l, function(y) apply(pairs, 1, function(x) D[M[[y]][[labelmatch[[y]][x[1]],labelmatch[[y]][x[2]]]],y]));
# we also need to know branch length distance matrix
d <- lapply(1:l, function(x) dist.nodes(trees[[x]]));
tl <- sapply(1:l, function(y) apply(pairs, 1, function(x) d[[y]][k+1,M[[y]][labelmatch[[y]][x[1]],labelmatch[[y]][x[2]]]]));
# append vector of difference in pendant branch lengths
E <- lapply(1:l, function(x) pen.edge.treematch(trees[[x]],labelmatch[[x]]))
P <- sapply(1:l, function(x) apply(E[[x]], 1, function(y) d[[x]][y[1],y[2]]) )
# matrix where each entry is a vector of squared differences plus pendant lengths
sqdistmat <- function(lambda) { sapply(1:l, function(a) sapply(1:l, function(b)
if (a<b) {sqrt(sum(c(sapply(1:x, function(n) ((1-lambda)*(tv[[n,a]]-tv[[n,b]])+lambda*(tl[[n,a]]-tl[[n,b]]))^2),
sapply(1:k, function(d) (lambda*(P[,a][[d]]-P[,b][[d]]))^2))))}
else {0}))  }
}
return(sqdistmat)
}
multi.dist <- cmpfun(multi.dist)
med.tree <- function(trees,likes=rep(1,length(trees)),lambda=0) {
n <- length(trees)
if (length(likes)!=n) {stop("Number of likelihoods is not equal to number of trees.")}
if (lambda<0) {stop("Pick lambda in [0,1]")}
if (lambda>1) {stop("Pick lambda in [0,1]")}
k <- length(trees[[1]]$tip.label)
for (i in 1:n) {
if (k != length(trees[[i]]$tip.label)) {
stop("trees must all have the same number of tips")
}
if (setequal(trees[[i]]$tip.label,trees[[1]]$tip.label) == FALSE) {
stop("trees have different tip label sets")
}
}
if (lambda!=0) { # if lambda=0 then we don't need edge lengths to be defined, but if lambda!=0 then we do
if (is.null(trees[[i]]$edge.length)) {
stop("edge lengths not defined")
}}
labelmatch <- lapply(1:n, function (y)
match(trees[[1]]$tip.label,trees[[y]]$tip.label))
# version of tree.vec which applies labelmatch first
tree.vec.match <- function(tr1,lambda,labelmatchi,k,n) {
M1 <- linear.mrca(tr1,k); # kxk MRCA matrix for tree
if (lambda!=1){ # make a copy with edge lengths = 1
TR1 <- tr1
TR1$edge.length <- rep(1,2*k-2)
D1 <- dist.nodes(TR1)
}
if (lambda!=0) { # if lambda!=0 we need to know branch length distances
# first, we need to rescale branch lengths so median is 1
tr1$edge.length <- tr1$edge.length/median(tr1$edge.length)
d1 <- dist.nodes(tr1);
}
pairs <- combn2(1:k)
# vt is the purely topological vector (don't waste time computing if lambda=1)
# vl is the purely length-based vector (don't waste time computing if lambda=0)
if (lambda==1) { vt <- rep(0,k*(k-1)/2)}
else {
vt <- apply(pairs, 1, function(x) D1[k+1,M1[[labelmatchi[x[1]],labelmatchi[x[2]]]]])
}
if (lambda==0) { vl <- rep(0,k*(k-1)/2)}
else {
vl <- apply(pairs, 1, function(x) d1[k+1,M1[[labelmatchi[x[1]],labelmatchi[x[2]]]]])
}
v <- (1-lambda)*vt + lambda*vl
if (lambda!=0) {
# append vector of pendant branch lengths
ep1 <- pen.edge.treematch(tr1,labelmatchi)
pen.length1 <- apply(ep1, 1, function(x) d1[x[1],x[2]])
v <- as.numeric(c(v,lambda*pen.length1))
}
return(v)
}
# initialise vector, length n choose 2 if lambda=0, otherwise n choose 2 + n
if (lambda==0) {  centre <- rep(0,(k*(k-1)/2)) }
else {  centre <- rep(0,(k*(k+1)/2)) }
vecs <- list()
for (i in 1:n) {
vecs[[i]] <- tree.vec.match(trees[[i]],lambda,labelmatch[[i]],k,n)
centre <- centre + vecs[[i]]*likes[[i]]
}
centre <- centre/n
# also want to know which vecs[[i]] is closest to median
d <- list()
for (i in 1:n){
v <- vecs[[i]]-centre
d[[i]] <- sqrt(sum(v^2))
}
class(d) <- "numeric"
md <- min(d)
median <- which(d==md)
result <- list()
result$centre <- centre
result$median <- median
result$mindist <- md
return(result)
}
med.tree <- cmpfun(med.tree)
#require(ggplot2)
#require(ade4)
#mydist <- multi.dist(rmtree(6,6))
#plotMDS <- function(distmatrix) {
#  distMDS <- dudi.pco(as.dist(distmatrix), scannf=FALSE, nf=2)
#  distdf <- as.data.frame(cbind(distMDS$li[,1], distMDS$li[,2]))
#  distplot <- ggplot(distdf, aes(distMDS$li[,1], distMDS$li[,2]))
#  return(distplot)
#}
#plotMDS(mydist) + geom_point() + xlab("") + ylab("") + theme(legend.title=element_blank())
#rm(distplot)
tr1 <- rtree(10)
tr1 <- rtree(6)
tr2 <- rtree(6)
example <- tree.dist(tr1,tr2,type="function")
plot(tr1)
2
plot(tr2)
tr2 <- rtree(6)
plot(tr2)
tr1 <- rtree(6)
plot(tr1)
plot(tr2)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0,1,100), function(x) example(x))
plot(exlambda)
exlambda
seq(0,1,100)
?seq
seq(from=0,to=1,by=100)
seq(0, 1, length.out = 11)
seq(0, 1, length.out = 100)
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(exlambda)
plot(exlambda,type="l")
tr1 <- rtree(6)
tr2 <- rtree(6)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(exlambda,type="l")
tr1 <- rtree(6)
tr2 <- rtree(6)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(exlambda,type="l")
tr1 <- rtree(6)
tr2 <- rtree(6)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(exlambda,type="l")
plot(tr1)
plot(tr2)
tr2$edge.length <- c(3,1,1,1,1,1)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(exlambda,type="l")
plot(tr1)
plot(tr2)
tr2$edge.length
tr1$edge.length <- c(3,1,1,1,1,1)
tr1 <- rtree(6)
tr2 <- rtree(6)
tr1$edge.length
tr1 <- rtree(6)
tr2 <- rtree(6)
plot(tr1)
plot(tr2)
tr1 <- rtree(6)
plot(tr1)
plot(tr2)
plot(tr1)
tr2$edge.length <- c(3,1,1,1,1,1,1,1,1,1)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(exlambda,type="l")
plot(tr1)
plot(tr2)
tr1 <- rtree(6)
tr2 <- rtree(6)
tr2$edge.length <- c(3,1,1,1,1,1,1,1,1,1)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(exlambda,type="l")
plot(tr1)
plot(tr2)
plot(exlambda,type="l")
?plot
plot(seq(0, 1, length.out = 100),exlambda,type="l")
plot(seq(0, 1, length.out = 100),exlambda,type="l",xlab="")
plot(seq(0, 1, length.out = 100),exlambda,type="l",xlab="lambda",ylab="dist")
plot(seq(0, 1, length.out = 100),exlambda,type="l",xlab="lambda",ylab="distance")
plot(tr1)
plot(tr2)
tr1 <- rtree(6)
tr2 <- rtree(6)
plot(tr1)
plot(tr2)
tr1 <- rtree(6)
tr2 <- rtree(6)
plot(tr1)
plot(tr2)
tr2 <- rtree(6)
plot(tr2)
plot(tr1)
plot(tr2)
tr1 <- rtree(6)
tr2 <- rtree(6)
plot(tr1)
plot(tr2)
tr2 <- rtree(6)
plot(tr2)
tr2 <- rtree(6)
plot(tr2)
tr2 <- rtree(6)
plot(tr2)
tr2 <- rtree(6)
plot(tr2)
tr2$edge.length <- c(3,1,1,1,1,1,1,1,1,1)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(seq(0, 1, length.out = 100),exlambda,type="l",xlab="lambda",ylab="distance")
plot(tr1)
plot(tr2)
tr1 <- rtree(4)
tr2 <- rtree(4)
tr2$edge.length <- c(3,1,1,1,1,1)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(seq(0, 1, length.out = 100),exlambda,type="l",xlab="lambda",ylab="distance")
plot(tr1)
plot(tr2)
tr1 <- rtree(4)
plot(tr1)
tr2 <- rtree(4)
plot(tr2)
tr1 <- rtree(4)
tr2 <- rtree(4)
plot(tr1)
plot(tr2)
plot(tr1)
tr1$tip.label <- c(4,3,2,1)
plot(tr1)
plot(tr2)
tr2$tip.label <- c(4,3,2,1)
plot(tr2)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(seq(0, 1, length.out = 100),exlambda,type="l",xlab="lambda",ylab="distance")
tr2$edge.length <- c(3,1,1,1,1,1)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(seq(0, 1, length.out = 100),exlambda,type="l",xlab="lambda",ylab="distance")
plot(tr1)
plot(tr2)
tr2$tip.label <- c(4,1,2,3)
example <- tree.dist(tr1,tr2,type="function")
exlambda <- sapply(seq(0, 1, length.out = 100), function(x) example(x))
plot(seq(0, 1, length.out = 100),exlambda,type="l",xlab="lambda",ylab="distance")
plot(tr1)
plot(tr2)
plot(seq(0, 1, length.out = 100),exlambda,type="l",xlab="lambda",ylab="distance")
plot(tr1)
plot(tr2)
load("C:/Users/Michelle/Dropbox/Metric paper/Conceptual.RData")
tr1 <- read.tree("((x,y),z);")
install_github("MichelleKendall/exploratree")
library(devtools)
install_github("MichelleKendall/exploratree")
setwd("C:/Users/Michelle/Dropbox/GitHubLocal/exploratree/exploratree")
require(roxygen2)
roxygen2::roxygenise()
devtools::document()
install_github("MichelleKendall/exploratree")
library(devtools)
install_github("MichelleKendall/exploratree")
library(exploratree)
example(exploratree)
exploratreeServer()
example(multi.dist)
devtools::check()
